//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VentaSnacks.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data.Entity;
    using System.Linq;

    public partial class Factura
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Factura()
        {
            this.Lineas = new HashSet<Linea>();
        }
        private VentaSnackEntities1 db = new VentaSnackEntities1();
        public int idFactura { get; set; }
        public string idCliente { get; set; }


        [Range(0, 10, ErrorMessage = "El Descuento debe ser entre 0 y 10.")]
        public Nullable<decimal> porcentajeDesc { get; set; }
        public int idEstado { get; set; }


        public decimal Total { get; set; }
        public int idTipoPago { get; set; }
        public System.DateTime fecha { get; set; }

        public virtual Cliente Cliente { get; set; }
        public virtual Estado Estado { get; set; }
        public virtual TipoPago TipoPago { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Linea> Lineas { get; set; }
        public object TempData { get; private set; }

        public decimal subtotal(List<VentaSnacks.Models.Linea> lin)
        {
            decimal subtotal = 0;

            foreach (var item in lin)
            {
                subtotal += item.total;
            }
            return subtotal;
        }

        public decimal descuento(decimal sub, decimal desc)
        {
            decimal d = 0;
            if (desc > 0)
            {
                d = (sub * (desc / 100));
            }
            return d;
        }

        public Boolean aplicadescuento(List<VentaSnacks.Models.Linea> lin)
        {
            Boolean aplica = false;
            if (lin.Count > 2 && subtotal(lin) >= Convert.ToDecimal(10000.00))
                aplica = true;

            return aplica;
        }


        public decimal impuestos(decimal monto, decimal desc)
        {
            decimal impuestos = 0;

            impuestos = (monto - desc) * Convert.ToDecimal(0.13);
            return impuestos;
        }

        public decimal total(decimal monto, decimal descuento, decimal impuesto)
        {
            decimal total = 0;

            total = monto - descuento + impuesto;

            return total;
        }

        public Factura ultFactura()
        {
            Factura f = null;
            f = db.Facturas.ToList().LastOrDefault();
            return f;
        }

        public string pagaFactura(Factura f, decimal monto)
        {
            String respuesta = "";
            if (f.Total <= monto)
            {
                decimal vuelto = monto - f.Total;
                f.idEstado = 1;
                db.Entry(f).State = EntityState.Modified;
                db.SaveChanges();
                respuesta = "Su vuelto es: ₡" + vuelto;
            }
            else
            {
                respuesta = "El monto no es suficiente";
            }

            return respuesta;
        }

        public Boolean guardar(Factura f)
        {
            Boolean status = false;

            if (f.Lineas.Count > 0)
            {
                foreach (var lin in f.Lineas)
                {
                    //Remueve el articulo de la lista ya que si se deja trata de crearlo de nuevo en la base de datos
                    lin.Articulo = null;
                    if (lin.cantidad < 1)
                    {
                        //Si algun producto es menor q 0, cancela la operacion
                        return status;
                    }
                }

                decimal subtotal = f.subtotal((List<VentaSnacks.Models.Linea>)f.Lineas);
                decimal descuento = Convert.ToDecimal(0);
                if (f.porcentajeDesc != null)
                {
                    if (f.aplicadescuento((List<VentaSnacks.Models.Linea>)f.Lineas))
                    {
                        if (f.porcentajeDesc > 0 && porcentajeDesc <= 10)
                        {
                            descuento = f.descuento(subtotal, Convert.ToDecimal(f.porcentajeDesc));
                        }
                        else
                        {
                            return status;
                        }

                    }
                    else
                    {
                        return status;
                    }
                }
                decimal impuestos = f.impuestos(subtotal, descuento);
                decimal tot = f.total(subtotal, descuento, impuestos);

                f.Total = tot;

                f.fecha = DateTime.Now;
                db.Facturas.Add(f);
                db.SaveChanges();
                status = true;
            }



            return status;
        }



        //public Boolean agregaCarrito(Linea linea)
        //{
        //    Boolean correcto = false;


        //    if (linea.cantidad > 0)
        //    {
        //        Articulo art = obtenerArticulo(linea);

        //        linea.Articulo = art;
        //        List<VentaSnacks.Models.Linea> obj = (List<VentaSnacks.Models.Linea>)Session["listaArticulos"];
        //        Linea remover = null;
        //        foreach (var li in obj)
        //        {
        //            if (linea.idArticulo == li.idArticulo)
        //            {
        //                linea.cantidad += li.cantidad;
        //                remover = li;
        //            }
        //        }
        //        obj.Remove(remover);
        //        linea.total = Decimal.Round(art.TotalLinea(linea), 2);
        //        obj.Add(linea);
        //        Session["listaArticulos"] = obj;




        //        return correcto;
        //}
    }
}
